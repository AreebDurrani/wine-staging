From cb6513ea1aafad23b5c16ddb6fc287e9a0bf8a0c Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 31 Mar 2020 15:11:31 -0500
Subject: [PATCH 20/54] winegstreamer: Insert parser into pipeline to rectify
 type differences.

It's probably better to use caps negotiation here, but this seemed simpler for now.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>
---
 dlls/winegstreamer/media_source.c | 114 ++++++++++++++++++++++++------
 1 file changed, 91 insertions(+), 23 deletions(-)

diff --git a/dlls/winegstreamer/media_source.c b/dlls/winegstreamer/media_source.c
index abf0cfd56f..cb247adcef 100644
--- a/dlls/winegstreamer/media_source.c
+++ b/dlls/winegstreamer/media_source.c
@@ -578,7 +578,6 @@ static void source_stream_added(GstElement *element, GstPad *pad, gpointer user)
             {
                 ERR("Error linking demuxer to stream %p, err = %d\n", existing_stream, ret);
             }
-            gst_element_sync_state_with_parent(existing_stream->appsink);
 
             goto leave;
         }
@@ -794,12 +793,99 @@ static const IMFMediaStreamVtbl media_stream_vtbl =
     media_stream_RequestSample
 };
 
+/* TODO: Use gstreamer caps negotiation */
+/* connects their_src to appsink */
+static HRESULT media_stream_align_with_mf(struct media_stream *stream, IMFMediaType **stream_type)
+{
+    GstCaps *source_caps = NULL;
+    GstCaps *target_caps = NULL;
+    GstElement *parser = NULL;
+    HRESULT hr = E_FAIL;
+
+    if (!(source_caps = gst_pad_query_caps(stream->their_src, NULL)))
+        goto done;
+    if (!(target_caps = make_mf_compatible_caps(source_caps)))
+        goto done;
+
+    if (TRACE_ON(mfplat))
+    {
+        gchar *source_caps_str = gst_caps_to_string(source_caps), *target_caps_str = gst_caps_to_string(target_caps);
+        TRACE("source caps %s\ntarget caps %s\n", debugstr_a(source_caps_str), debugstr_a(target_caps_str));
+        g_free(source_caps_str);
+        g_free(target_caps_str);
+    }
+
+    g_object_set(stream->appsink, "caps", target_caps, NULL);
+
+    if (!(gst_caps_is_equal(source_caps, target_caps)))
+    {
+        GList *parser_list_one, *parser_list_two;
+        GstElementFactory *parser_factory;
+
+        parser_list_one = gst_element_factory_list_get_elements(GST_ELEMENT_FACTORY_TYPE_PARSER, 1);
+
+        parser_list_two = gst_element_factory_list_filter(parser_list_one, source_caps, GST_PAD_SINK, 0);
+        gst_plugin_feature_list_free(parser_list_one);
+        parser_list_one = parser_list_two;
+
+        parser_list_two = gst_element_factory_list_filter(parser_list_one, target_caps, GST_PAD_SRC, 0);
+        gst_plugin_feature_list_free(parser_list_one);
+        parser_list_one = parser_list_two;
+
+        if (!(g_list_length(parser_list_one)))
+        {
+            gst_plugin_feature_list_free(parser_list_one);
+            ERR("Failed to find parser for stream\n");
+            hr = E_FAIL;
+            goto done;
+        }
+
+        parser_factory = g_list_first(parser_list_one)->data;
+        TRACE("Found parser %s.\n", GST_ELEMENT_NAME(parser_factory));
+
+        parser = gst_element_factory_create(parser_factory, NULL);
+
+        gst_plugin_feature_list_free(parser_list_one);
+
+        if (!parser)
+        {
+            hr = E_FAIL;
+            goto done;
+        }
+
+        gst_bin_add(GST_BIN(stream->parent_source->container), parser);
+
+        assert(gst_pad_link(stream->their_src, gst_element_get_static_pad(parser, "sink")) == GST_PAD_LINK_OK);
+
+        assert(gst_element_link(parser, stream->appsink));
+
+        gst_element_sync_state_with_parent(parser);
+    }
+    else
+    {
+        assert(gst_pad_link(stream->their_src, gst_element_get_static_pad(stream->appsink, "sink")) == GST_PAD_LINK_OK);
+    }
+
+    stream->my_sink = gst_element_get_static_pad(parser ? parser : stream->appsink, "sink");
+
+    *stream_type = mf_media_type_from_caps(target_caps);
+
+    hr = S_OK;
+
+    done:
+    if (source_caps)
+        gst_caps_unref(source_caps);
+    if (target_caps)
+        gst_caps_unref(target_caps);
+
+    return hr;
+}
+
 static HRESULT media_stream_constructor(struct media_source *source, GstPad *pad, DWORD stream_id, struct media_stream **out_stream)
 {
     struct media_stream *object = heap_alloc_zero(sizeof(*object));
     IMFMediaTypeHandler *type_handler = NULL;
     IMFMediaType *stream_type = NULL;
-    GstCaps *caps = NULL;
     HRESULT hr;
 
     TRACE("(%p %p)->(%p)\n", source, pad, out_stream);
@@ -828,22 +914,9 @@ static HRESULT media_stream_constructor(struct media_source *source, GstPad *pad
     g_object_set(object->appsink, "async", FALSE, NULL); /* <- This allows us interact with the bin w/o prerolling */
     g_signal_connect(object->appsink, "new-sample", G_CALLBACK(stream_new_sample_wrapper), object);
 
-    if (!(caps = gst_pad_query_caps(pad, NULL)))
+    if (FAILED(hr = media_stream_align_with_mf(object, &stream_type)))
         goto fail;
 
-    if (TRACE_ON(mfplat))
-    {
-        gchar *caps_str = gst_caps_to_string(caps);
-        TRACE("caps %s\n", debugstr_a(caps_str));
-        g_free(caps_str);
-    }
-
-    if (!(stream_type = mf_media_type_from_caps(caps)))
-        goto fail;
-
-    gst_caps_unref(caps);
-    caps = NULL;
-
     if (FAILED(hr = MFCreateStreamDescriptor(stream_id, 1, &stream_type, &object->descriptor)))
         goto fail;
 
@@ -858,23 +931,18 @@ static HRESULT media_stream_constructor(struct media_source *source, GstPad *pad
     IMFMediaType_Release(stream_type);
     stream_type = NULL;
 
-    object->my_sink = gst_element_get_static_pad(object->appsink, "sink");
-    gst_pad_set_element_private(pad, object);
-
-    gst_pad_link(object->their_src, object->my_sink);
+    gst_pad_set_element_private(object->their_src, object);
 
     gst_element_sync_state_with_parent(object->appsink);
 
     TRACE("->(%p)\n", object);
-
     *out_stream = object;
+
     return S_OK;
 
     fail:
     WARN("Failed to construct media stream, hr %#x.\n", hr);
 
-    if (caps)
-        gst_caps_unref(caps);
     if (stream_type)
         IMFMediaType_Release(stream_type);
     if (type_handler)
-- 
2.28.0

