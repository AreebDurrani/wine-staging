From 91a597b6a9299483c29c2d79b7471735b3839009 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Wed, 25 Feb 2015 22:45:42 +0100
Subject: [PATCH] ntdll: Fix race-condition when threads are killed during
 shutdown.

When exit_thread is executed, nb_threads is decremented before the thread is
fully shutdown. When another thread runs ExitProcess() this will cause a SIGQUIT
signal to all threads, effectively decrementing nb_threads twice. The process
will terminate with a wrong exitcode then because the refcount reaches zero too
early.

Currently Wine has no locking protection of LdrShutdownProcess(), so it can
only be executed safely when all other threads have terminated before. Most
likely there are more Wine bugs in this area, but the attached patch should
fix the most critical one (messed up refcounting of threads) for now.
---
 dlls/ntdll/thread.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
index eda5d1cea12b..8a0b612b39a4 100644
--- a/dlls/ntdll/thread.c
+++ b/dlls/ntdll/thread.c
@@ -429,6 +429,7 @@ void exit_thread( int status )
 void WINAPI RtlExitUserThread( ULONG status )
 {
     static void *prev_teb;
+    sigset_t sigset;
     TEB *teb;
 
     if (status)  /* send the exit code to the server (0 is already the default) */
@@ -465,6 +466,11 @@ void WINAPI RtlExitUserThread( ULONG status )
         }
     }
 
+    sigemptyset( &sigset );
+    sigaddset( &sigset, SIGQUIT );
+    pthread_sigmask( SIG_BLOCK, &sigset, NULL );
+    if (InterlockedDecrement( &nb_threads ) <= 1) _exit( status );
+
     signal_exit_thread( status );
 }
 
-- 
2.26.2

