From 223addb60e053484eaa77df434898419683e926b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Sun, 19 Feb 2017 05:38:40 +0100
Subject: [PATCH] kernel32: Make K32GetPerformanceInfo faster.

---
 dlls/kernelbase/debug.c | 44 ++++++++++++++---------------------------
 server/process.c        | 18 +++++++++++++++++
 server/protocol.def     |  8 ++++++++
 3 files changed, 41 insertions(+), 29 deletions(-)

diff --git a/dlls/kernelbase/debug.c b/dlls/kernelbase/debug.c
index 6acdf0f1ea95..8f021ebb0d21 100644
--- a/dlls/kernelbase/debug.c
+++ b/dlls/kernelbase/debug.c
@@ -1449,7 +1449,6 @@ BOOL WINAPI DECLSPEC_HOTPATCH K32GetPerformanceInfo( PPERFORMANCE_INFORMATION in
 {
     SYSTEM_PERFORMANCE_INFORMATION perf;
     SYSTEM_BASIC_INFORMATION basic;
-    SYSTEM_PROCESS_INFORMATION *process, *spi;
     DWORD info_size;
     NTSTATUS status;
 
@@ -1462,9 +1461,9 @@ BOOL WINAPI DECLSPEC_HOTPATCH K32GetPerformanceInfo( PPERFORMANCE_INFORMATION in
     }
 
     status = NtQuerySystemInformation( SystemPerformanceInformation, &perf, sizeof(perf), NULL );
-    if (!set_ntstatus( status )) return FALSE;
+    if (status) goto err;
     status = NtQuerySystemInformation( SystemBasicInformation, &basic, sizeof(basic), NULL );
-    if (!set_ntstatus( status )) return FALSE;
+    if (status) goto err;
 
     info->cb                 = sizeof(*info);
     info->CommitTotal        = perf.TotalCommittedPages;
@@ -1478,37 +1477,24 @@ BOOL WINAPI DECLSPEC_HOTPATCH K32GetPerformanceInfo( PPERFORMANCE_INFORMATION in
     info->KernelNonpaged     = perf.NonPagedPoolUsage;
     info->PageSize           = basic.PageSize;
 
-    /* fields from SYSTEM_PROCESS_INFORMATION */
-    NtQuerySystemInformation( SystemProcessInformation, NULL, 0, &info_size );
-    for (;;)
+    SERVER_START_REQ( get_system_info )
     {
-        process = HeapAlloc( GetProcessHeap(), 0, info_size );
-        if (!process)
+        status = wine_server_call( req );
+        if (!status)
         {
-            SetLastError( ERROR_OUTOFMEMORY );
-            return FALSE;
-        }
-        status = NtQuerySystemInformation( SystemProcessInformation, process, info_size, &info_size );
-        if (!status) break;
-        HeapFree( GetProcessHeap(), 0, process );
-        if (status != STATUS_INFO_LENGTH_MISMATCH)
-        {
-            SetLastError( RtlNtStatusToDosError( status ) );
-            return FALSE;
+            info->ProcessCount = reply->processes;
+            info->HandleCount = reply->handles;
+            info->ThreadCount = reply->threads;
         }
     }
-    info->HandleCount = info->ProcessCount = info->ThreadCount = 0;
-    spi = process;
-    for (;;)
-    {
-        info->ProcessCount++;
-        info->HandleCount += spi->HandleCount;
-        info->ThreadCount += spi->dwThreadCount;
-        if (spi->NextEntryOffset == 0) break;
-        spi = (SYSTEM_PROCESS_INFORMATION *)((char *)spi + spi->NextEntryOffset);
-    }
-    HeapFree( GetProcessHeap(), 0, process );
+    SERVER_END_REQ;
+
+    if (status) goto err;
     return TRUE;
+
+err:
+    SetLastError( RtlNtStatusToDosError( status ) );
+    return FALSE;
 }
 
 
diff --git a/server/process.c b/server/process.c
index 3156e1bc82a5..da5c55e5368a 100644
--- a/server/process.c
+++ b/server/process.c
@@ -1830,3 +1830,21 @@ DECL_HANDLER(resume_process)
         release_object( process );
     }
 }
+
+/* Retrieve process, thread and handle count */
+DECL_HANDLER(get_system_info)
+{
+    struct process *process;
+
+    reply->processes = 0;
+    reply->threads = 0;
+    reply->handles = 0;
+
+    LIST_FOR_EACH_ENTRY( process, &process_list, struct process, entry )
+    {
+        if (!process->running_threads) continue;
+        reply->processes++;
+        reply->threads += process->running_threads;
+        reply->handles += get_handle_table_count( process );
+    }
+}
diff --git a/server/protocol.def b/server/protocol.def
index ef10b5e1438c..ca34c9dc1b4b 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -3992,3 +3992,11 @@ struct handle_info
 @REQ(resume_process)
     obj_handle_t handle;       /* process handle */
 @END
+
+/* Return system information values */
+@REQ(get_system_info)
+@REPLY
+    unsigned int processes;   /* number of processes */
+    unsigned int threads;     /* number of threads */
+    unsigned int handles;     /* number of handles */
+@END
-- 
2.26.2

