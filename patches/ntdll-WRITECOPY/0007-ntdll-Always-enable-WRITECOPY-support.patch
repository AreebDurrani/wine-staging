From 255c6b90685e1fe6eaa7b3a2eec2730c6d0f47a6 Mon Sep 17 00:00:00 2001
From: Andrew Wesie <awesie@gmail.com>
Date: Fri, 24 Apr 2020 14:55:16 -0500
Subject: [PATCH] ntdll: Always enable WRITECOPY support.

Signed-off-by: Andrew Wesie <awesie@gmail.com>
---
 dlls/ntdll/virtual.c | 22 +++-------------------
 1 file changed, 3 insertions(+), 19 deletions(-)

diff --git a/dlls/ntdll/virtual.c b/dlls/ntdll/virtual.c
index d255ed86f75..da71d02bbcc 100644
--- a/dlls/ntdll/virtual.c
+++ b/dlls/ntdll/virtual.c
@@ -324,22 +324,6 @@ static const char *VIRTUAL_GetProtStr( BYTE prot )
     return buffer;
 }
 
-/* This might look like a hack, but it actually isn't - the 'experimental' version
- * is correct, but it already has revealed a couple of additional Wine bugs, which
- * were not triggered before, and there are probably some more.
- * To avoid breaking Wine for everyone, the new correct implementation has to be
- * manually enabled, until it is tested a bit more. */
-static inline BOOL experimental_WRITECOPY( void )
-{
-    static int enabled = -1;
-    if (enabled == -1)
-    {
-        const char *str = getenv("STAGING_WRITECOPY");
-        enabled = str && (atoi(str) != 0);
-    }
-    return enabled;
-}
-
 /***********************************************************************
  *           VIRTUAL_GetUnixProt
  *
@@ -356,10 +340,10 @@ static int VIRTUAL_GetUnixProt( BYTE vprot )
 #if defined(__i386__) || defined(__x86_64__)
         if (vprot & VPROT_WRITECOPY)
         {
-            if (experimental_WRITECOPY() && !(vprot & VPROT_WRITTEN))
-                prot = (prot & ~PROT_WRITE) | PROT_READ;
-            else
+            if (vprot & VPROT_WRITTEN)
                 prot |= PROT_WRITE | PROT_READ;
+            else
+                prot = (prot & ~PROT_WRITE) | PROT_READ;
         }
 #else
         /* FIXME: Architecture needs implementation of signal_init_early. */
-- 
2.25.4

